//file:noinspection GradlePackageVersionRange
plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
}

version = "${project.mod_version}+${project.minecraft_base_version}"
group = project.maven_group

loom {
    accessWidenerPath = project.file("src/main/resources/affinity.accesswidener");

    runs {
        datagen {
            server()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated")}"

            ideConfigGenerated = true
            runDir "build/datagen"
        }
        datagenClient {
            client()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated")}"

            ideConfigGenerated = true
            runDir "build/datagen"
        }
    }
}

repositories {
    // modmenu, trinkets
    maven { url "https://maven.terraformersmc.com/" }

    // cca, pal
    maven { url "https://ladysnake.jfrog.io/artifactory/mods" }

    // owo, the one probe
    maven { url "https://maven.wispforest.io" }

    // rei
    maven { url "https://maven.shedaniel.me/" }

    // terrablender
    maven { url "https://maven.minecraftforge.net/" }

    // the one probe -> forge config
    maven { url "https://cursemaven.com" }

    // canvas
    maven { url "https://maven.vram.io/" }

    // emoji-type
    maven {
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:${project.cca_version}"

    modImplementation "dev.emi:trinkets:${project.trinkets_version}"

    modImplementation "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"
    include "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"

    modImplementation "io.wispforest:owo-lib:${project.owo_version}"

    modImplementation "mcjty.theoneprobe:theoneprobe-fabric:${project.top_version}"

    modImplementation "com.github.glitchfiend:TerraBlender-fabric:${project.terrablender_version}"

    modLocalRuntime "com.ptsmods:devlogin:2.0"
    modLocalRuntime "maven.modrinth:emoji-type:1.0.3"

    modLocalRuntime ("io.vram:canvas-fabric-mc118:${project.canvas_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }


    repositories {

    }
}
